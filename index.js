require('dotenv').config()
const { STICKER, BOT_API, MONGODB_URI } = process.env

const { MongoClient } = require('mongodb')
const client = new MongoClient(MONGODB_URI)

client.connect()

const db = client.db('random-anime-bot')
const users = db.collection('users')

const axios = require('axios')
const TelegramApi = require('node-telegram-bot-api')

const token = BOT_API
const bot = new TelegramApi(token, { polling: true })

const reply_markup = JSON.stringify({
  keyboard: [
    [{ text: '–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ' }],
    [{ text: '–§—ç–Ω—Ç–µ–∑–∏' }, { text: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è' }, { text: '–°—ë–Ω–µ–Ω' }],
    [{ text: '–ú–µ—Ö–∞' }, { text: '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞' }, { text: '–≠–∫—à–µ–Ω' }],
    [{ text: '–†–æ–º–∞–Ω—Ç–∏–∫–∞' }, { text: '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å' }, { text: '–î—Ä–∞–º–∞' }],
    [{ text: '–ú—É–∑—ã–∫–∞' }, { text: '–ö–æ–º–µ–¥–∏—è' }, { text: '–°–ø–æ—Ä—Ç' }],
    [{ text: '–î–µ—Ç–µ–∫—Ç–∏–≤' }, { text: '–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ' }, { text: '–£–∂–∞—Å—ã' }],
    [{ text: '–ò–≥—Ä—ã' }, { text: '–ì–∞—Ä–µ–º' }, { text: '–≠—Ç—Ç–∏' }]
  ],
  resize_keyboard: true
})

const getAnime = async (chatId, genre, msg) => {
  axios.get(`https://anime777.ru/api/rand?genre=${genre}`).then(async res => {
    try {
      const content = (
        `${res.data.title_orig} - ${res.data.title}\n\n` +
        `- –ñ–∞–Ω—Ä: ${res.data.material_data.anime_genres.join(', ')}\n\n` +
        `- –û–ø–∏—Å–∞–Ω–∏–µ: ${res.data.material_data.description}`
      )
      
      if (content.length <= 1024) {
        await bot.sendPhoto(chatId, res.data.material_data.poster_url, { caption: content, reply_markup })
        
        await users.updateOne({ id: chatId },
          {
            $set: {
              username: msg.from.username,
              first_name: msg.from.first_name,
              last_name: msg.from.last_name,
              date_last_call: new Date(),
              last_call: genre
            },
            $inc: { number_calls: 1 },
            $push: {
              calls: {
                call: genre,
                date: new Date()
              }
            }
          }
        )
      } else {
        getAnime(chatId, genre, msg)
      }
    } catch (e) {
      await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üëáüèª', { reply_markup })

      await users.updateOne({ id: chatId },
        {
          $set: {
            username: msg.from.username,
            first_name: msg.from.first_name,
            last_name: msg.from.last_name,
            date_last_bad_call: new Date(),
            last_bad_call: genre
          },
          $inc: { number_bad_calls: 1 },
          $push: {
            bad_calls: {
              call: msg.text,
              date: new Date()
            }
          }
        }
      )
    }
  })
}

bot.setMyCommands([
  {command: '/start', description: 'Start Bot'}
])

bot.on('message', async msg => {
  const text = msg.text
  const chatId = msg.chat.id

  try {
    if (text === '/start') {
      await bot.sendSticker(chatId, STICKER)
      await bot.sendMessage(chatId,
        `üëãüèª –ü—Ä–∏–≤–µ—Ç ${msg.from.first_name}${(msg.from.last_name === undefined) ? '': ` ${msg.from.last_name}`}!\n` +
        'üéÇ –≠—Ç–æ –ë–æ—Ç –î–ª—è –ü–æ–∏—Å–∫–∞ –ê–Ω–∏–º–µ.\n' +
        'üë®üèª‚Äçüíª –ê–≤—Ç–æ—Ä: @SmartMainnet'
      )
      await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üëáüèª', { reply_markup })

      await users.findOne({ id: chatId }).then(async res => {
        if (!res) {
          await users.insertOne({
            id: chatId,
            username: msg.from.username,
            first_name: msg.from.first_name,
            last_name: msg.from.last_name,
            start_date: new Date()
          })
        }
      })
    } else if (text === '–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ') {
      getAnime(chatId, '', msg)
    } else {
      getAnime(chatId, text, msg)
    }
  } catch (e) {
    await bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
  }
})